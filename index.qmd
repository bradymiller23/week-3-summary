---
title: "Weekly Summary Template"
author: "Brady Miller"
title-block-banner: true
title-block-style: default
toc: true
# format: html
format: pdf
---

------------------------------------------------------------------------

## Tuesday, Jan 24

::: callout-important
## TIL

Include a *very brief* summary of what you learnt in this class here.

Today, I learnt the following concepts in class:

1.  How to read in csv's through functions such as read.csv, read.table or read.delim & also how to hard code a data frame
2.  Learned about what dplyr is and some of its verbs and their functions 
3.  Learned about ggplot, some of its geoms and how to create plots using its aesthetics.
:::


```{R results='hide'}
library(tidyverse)
library(knitr)
```

#### In class we learned how to hard code in a data frame and that the kable function can help 'clean up' tables (make them look better)

```{r}
data_hard_code <- data.frame(
  Name = c("Jake", "Ryan", "Emma"),
  Age = c(25,44,31),
  Height = c(5.10,6.1,5.5)
)

data_hard_code %>%
  knitr::kable()

# data <- read.csv("file path.csv") is used to read in a csv file
```

#### Some of the dplyr verbs that we learned about and some examples of using them are below

```{r}
# Select
head(mpg,10) %>%
  select(c(model,drv, cty)) %>%
  knitr::kable()

# Mutate
iris %>%
  mutate(sepal_area = Sepal.Length * Sepal.Width) %>%
  head(10) %>%
  knitr::kable()

# Filter
head(mpg,10) %>%
  filter(hwy > 26) %>%
  head(., 10) %>%
  knitr::kable()
```


#### Learned how to use ggplot with some basic geoms and aesthetics
```{r}
# creates scatterplot of city miles/gallon vs hwy miles/gallon 
# color encodes each point by its manufacturer
# adds a trend line between the city and highway mpg
plot <- ggplot(mpg)
plot <- plot +
  geom_point(aes(x = cty, y = hwy, color = manufacturer)) + 
  geom_smooth(aes(x = cty, y = hwy))
plot
```


## Thursday, Jan 26

::: callout-important
## TIL

Include a *very brief* summary of what you learnt in this class here.

Today, I learnt the following concepts in class:

1.  How to use ggThemeAssist
2.  Some of the packages from the tidyverse library and what they can do
3.  Discussed categorical variables/factors and how we can factor variables
:::


#### Using ggThemeAssist, you can highlight the code below and add in all the extra theme features seen in the next code chunk
```{r}
library(ggThemeAssist)
graph <- mpg %>%
  ggplot() + 
  geom_point(aes(x = cty, y = hwy, color = class))
```

```{r}
graph <- mpg %>%
  ggplot() + 
  geom_point(aes(x = cty, y = hwy, color = class)) + theme(plot.title = element_text(face = "bold"),
    panel.background = element_rect(linetype = "dashed"),
    plot.background = element_rect(fill = "white",
        linetype = "dashed")) +labs(title = "City mpg vs Highway mpg",
    x = "City mpg", y = "Highway mpg")
```


#### Some packages in tidyverse that we discussed were purrr, forcats and readr

Purrr provides lots of functional programming tools
```{r}
# creating an ixi matrix and computes the average of the elements 

results = c()
for (i in 1:5) {
	M <- matrix(
		runif(i*i), nrow = i
		)
	results[i] <- mean(M)
}
results

# map() -> applies function to each element of matrix and returns output as a list
map(
	1:5,
	function(i){
		mean(
			matrix(
				runif(i*i), nrow = i
				)
			)
	}
)
```


#### Categorical Variables/Factors

We learned that by using as.factor(), we can break down a column containing categorical variables into its levels

```{r}
var <- mpg$manufacturer
as.factor(var)
```

Can use fct_reorder(), to reorder the values of a given categorical variable based on another variable. 
```{r}
# reorganizes the manufacturer levels based on hwy mpg in ascending order
fct_reorder(var, mpg$hwy, .desc = FALSE)
```